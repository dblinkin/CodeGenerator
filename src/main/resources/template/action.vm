// **********************************************************************"
// This file was generated by a code generator!"
// generator version 1.0.0.
// **********************************************************************

package $packageName

import ${packageName}.${struct.structName};
import ${packageName}.${struct.structName}Service;
import com.opensymphony.xwork2.ModelDriven;
import com.qq.book.console.RetJSON;
import com.qq.book.console.util.ConsoleDBUtil;
import com.qq.bookutil.SearchUtil;
import console.base.action.BaseAction;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class ${struct.structName}Action extends BaseAction implements ModelDriven<${struct.structName}> {
    private ${struct.structName} ${struct.javaName};

    private String sendMsg = "";

    public String queryByPage() {
        ArrayList<ConsoleDBUtil.DB_Param> params = new ArrayList<ConsoleDBUtil.DB_Param>();
        params.add(new ConsoleDBUtil.DB_Param("id", "=", query_bid, ""));
        LinkedHashMap<String, String> orders = new LinkedHashMap<String, String>();
        orders.put("id", "desc");

        SearchUtil.SearchRet sr;
        try {
            sr = ${struct.structName}Service.queryByPage(params, orders, curpage, pagesize, getLink());
        } catch (Exception e) {
            log.error("${struct.structName}Action|queryByPage", e);
            return "error";
        }

        request.setAttribute("sr", sr);
        return "success";
    }

    public void query() {
        try {
            ${struct.structName} tr = ${struct.structName}Service.query${struct.structName}(${struct.javaName}.getId());
            RetJSON.success(tr).response(response);
        } catch (Exception e) {
            log.error("${struct.structName}Action|query", e);
            RetJSON.failedWithDbError().response(response);
        }
    }

    public void add${struct.structName}() {
        ${struct.javaName}.setOperatorUid(userId);
        ${struct.javaName}.setOperateTime(DateUtils.getCurrentDateTime());

        if (!check${struct.structName}(${struct.javaName})) {
            RetJSON.failed(sendMsg).response(response);
            return;
        }

        if (!tryUploadFile(${struct.javaName})) {
            RetJSON.failed("上传文件失败").response(response);
            return;
        }

        try {
            int ${struct.javaName}Id = TreasureService.addTreasure(${struct.javaName});
            if (${struct.javaName}Id < 0) {
                RetJSON.failedWithDbError().response(response);
                return;
            }

            ${struct.javaName}.setId(${struct.javaName}Id);

            RetJSON.success().response(response);
        } catch (Exception e) {
            log.error("${struct.structName}Action|add${struct.structName}", e);
            RetJSON.failedWithDbError().response(response);
        }
    }

    public void update${struct.structName}() {
        ${struct.javaName}.setOperatorUid(userId);
        ${struct.javaName}.setOperateTime(DateUtils.getCurrentDateTime());

        if (!check${struct.structName}(${struct.javaName})) {
            RetJSON.failed(sendMsg).response(response);
            return;
        }

        if (!tryUploadFile(${struct.javaName})) {
            RetJSON.failed("上传文件失败").response(response);
            return;
        }

        try {
            int effectedRow = ${struct.structName}Service.update${struct.structName}(${struct.javaName});
            if (effectedRow < 0) {
                RetJSON.failedWithDbError().response(response);
                return;
            }

            RetJSON.success().response(response);
        } catch (Exception e) {
            log.error("${struct.structName}Action|update${struct.structName}", e);
            RetJSON.failedWithDbError().response(response);
        }
    }

    public void delete${struct.structName}() {
        try {
            ${struct.structName}Service.delete${struct.structName}(${struct.javaName});
            RetJSON.success().response(response);
        } catch (Exception e) {
            log.error("${struct.structName}Action|delete${struct.structName}", e);
            RetJSON.failedWithDbError().response(response);
        }
    }

    private boolean check${struct.structName}(${struct.structName} ${struct.javaName}) {
        return true;
    }

    private boolean tryUploadFile(${struct.structName} ${struct.javaName}){
        return true;
    }

    @Override
    public ${struct.structName} getModel() {
        if (${struct.javaName} == null) {
            ${struct.javaName} = new ${struct.structName}();
        }
        return treasure;
    }
}